"""
Unit tests for the AI Newsroom Team agents.

This module provides unit tests for individual agent components.
"""
import unittest
import os
import json
from unittest.mock import MagicMock, patch

from src.agents.gatherbot import GatherBot
from src.agents.writerbot import WriterBot
from src.agents.factcheckbot import FactCheckBot
from src.messaging import MessageBus, Message, MessageType
from src.tools import NewsAPIClient, WebScraper, LLMClient


class TestGatherBot(unittest.TestCase):
    """Test cases for the GatherBot agent."""
    
    def setUp(self):
        """Set up test environment."""
        self.message_bus = MagicMock(spec=MessageBus)
        self.gather_bot = GatherBot(name="TestGatherBot", message_bus=self.message_bus)
    
    @patch('src.tools.NewsAPIClient.search_news')
    def test_gather_news(self, mock_search_news):
        """Test news gathering functionality."""
        # Mock the news API response
        mock_search_news.return_value = {
            "status": "ok",
            "articles": [
                {
                    "title": "Test Article",
                    "url": "https://example.com/article",
                    "source": {"name": "Test Source"},
                    "publishedAt": "2025-05-22T12:00:00Z",
                    "author": "Test Author",
                    "content": "This is a test article content.",
                    "description": "Test article description."
                }
            ]
        }
        
        # Test the gather_news method
        task_data = {
            "topic": "test topic",
            "sources": ["news_api"],
            "max_items": 5
        }
        
        result = self.gather_bot.process_task(task_data)
        
        # Verify the result
        self.assertIn("items", result)
        self.assertGreaterEqual(len(result["items"]), 1)
        self.assertEqual(result["topic"], "test topic")
        self.assertIn("sources_used", result)


class TestWriterBot(unittest.TestCase):
    """Test cases for the WriterBot agent."""
    
    def setUp(self):
        """Set up test environment."""
        self.message_bus = MagicMock(spec=MessageBus)
        self.writer_bot = WriterBot(name="TestWriterBot", message_bus=self.message_bus)
    
    @patch('src.tools.LLMClient.generate')
    def test_write_article(self, mock_generate):
        """Test article writing functionality."""
        # Mock the LLM response
        mock_generate.return_value = """
        Test Headline
        
        This is a test article generated by the LLM.
        It contains multiple paragraphs of content.
        
        This is the second paragraph with more information.
        """
        
        # Test the write_article method
        gather_data = {
            "topic": "test topic",
            "items": [
                {
                    "title": "Test Item",
                    "content": "Test content with a quote: \"This is important.\"",
                    "source_name": "Test Source"
                }
            ],
            "sources_used": ["Test Source"]
        }
        
        article = self.writer_bot.write_article(gather_data)
        
        # Verify the result
        self.assertEqual(article.headline, "Test Headline")
        self.assertIn("test article", article.content)
        self.assertEqual(article.byline, "AI Newsroom")


class TestFactCheckBot(unittest.TestCase):
    """Test cases for the FactCheckBot agent."""
    
    def setUp(self):
        """Set up test environment."""
        self.message_bus = MagicMock(spec=MessageBus)
        self.fact_check_bot = FactCheckBot(name="TestFactCheckBot", message_bus=self.message_bus)
    
    def test_extract_claims(self):
        """Test claim extraction functionality."""
        content = """
        According to recent reports, global temperatures have increased by 1.5 degrees.
        Scientists said this trend is concerning.
        The weather was nice yesterday.
        """
        
        claims = self.fact_check_bot._extract_claims(content)
        
        # Verify the result
        self.assertGreaterEqual(len(claims), 1)
        self.assertIn("global temperatures", claims[0].lower())
    
    @patch('src.tools.LLMClient.verify_claim')
    def test_verify_claim(self, mock_verify_claim):
        """Test claim verification functionality."""
        # Mock the verification response
        mock_verify_claim.return_value = {
            "verification_status": "verified",
            "confidence_score": 0.8,
            "reasoning": "The evidence supports this claim."
        }
        
        # Test the verify_claim method
        claim = "Global temperatures have increased by 1.5 degrees."
        gather_data = {
            "items": [
                {
                    "title": "Climate Report",
                    "content": "Global temperatures have increased by 1.5 degrees according to new data.",
                    "source_name": "Science Journal"
                }
            ]
        }
        
        verification = self.fact_check_bot._verify_claim(claim, gather_data)
        
        # Verify the result
        self.assertIn("verification_status", verification.dict())
        self.assertGreaterEqual(verification.confidence_score, 0.0)
        self.assertLessEqual(verification.confidence_score, 1.0)


if __name__ == '__main__':
    unittest.main()
